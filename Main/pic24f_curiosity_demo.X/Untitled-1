/*******************************************************************************
Copyright 2016 Microchip Technology Inc. (www.microchip.com)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*******************************************************************************/

#include <stdint.h>

#include "leds.h"
#include "buttons.h"
#include "leds_rgb.h"
#include "adc.h"
#include "timer_1ms.h"
#include "i2c.h"
#include "leds.h"



//------------------------------------------------------------------------------
//Application related definitions
//------------------------------------------------------------------------------
//Calculate baud rate of I2C
/*
* I2CxBRG = (FCY/FSCL - FCY/10,000,000) - 1
* Based on FCY = FOSC/2; Doze mode and PLL are disabled.
*/
#define Fosc (8000000) // crystal
#define Fcy (Fosc*4/2) // w.PLL (Instruction Per Second)
#define Fsck 400000 // 400kHz I2C
#define I2C1_BRG ((Fcy/2/Fsck)-1)
int main(void)
{
    char SlaveAddress = 0x4;
    unsigned char *letras;
    unsigned char tx_data[] = {'P', 'I', '\0'};
    // char c='M';
    //Get your pointer to a variable
    letras = tx_data;
    //Set-up LEDs
    LED_Enable (LED_D6);
    LED_Enable (LED_D3);
    //Initialize I2C1
    OpenI2C1(I2C_ON, I2C1_BRG);
    while(1)
        {
        //Start I2C1 condition
        StartI2C1 (); //Send the Start Bit
        IdleI2C1(); //Wait to complete
        //Write-to-Slave Address
        MasterWriteI2C1((SlaveAddress<<0)|0); //Send device advice adress byte to the slave with the write indication
        IdleI2C1(); //Wait to complete
        //If ACK is received...
            if( I2C1STATbits.ACKSTAT == 0 )
            {
            LED_On (LED_D6); //Light up LED #6
            MasterputsI2C1(letras); //Send your string :)
            IdleI2C1(); //Wait to complete
            //If NACK (merda)...
                if( I2C1STATbits.ACKSTAT == 1 ) 
                {
                    LED_On (LED_D3); //Light up LED #3
                }
            }
        }
}